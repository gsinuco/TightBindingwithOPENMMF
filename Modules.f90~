MODULE PRINT_MATRIX

  IMPLICIT NONE
  PUBLIC 
  INTERFACE

     SUBROUTINE WRITE_MATRIX(A)
       DOUBLE PRECISION, DIMENSION(:,:) :: A
     END SUBROUTINE  WRITE_MATRIX

     SUBROUTINE WRITE_MATRIX_INT(A)
       INTEGER, DIMENSION(:,:) :: A
     END SUBROUTINE  WRITE_MATRIX_INT
     
  END INTERFACE
END MODULE PRINT_MATRIX

MODULE PHYSICAL_CONSTANTS
  DOUBLE PRECISION, PARAMETER :: PI      = 4.0*ATAN(1.0)
  DOUBLE PRECISION, PARAMETER :: HPLANCK = 6.62607015E-34
  DOUBLE PRECISION, PARAMETER :: HBAR    = 1.054571817E-34
  DOUBLE PRECISION, PARAMETER :: UMA     = 1.66053906660E-27
  DOUBLE PRECISION, PARAMETER :: a_Bohr  = 5.29E-11
END MODULE PHYSICAL_CONSTANTS

MODULE ATOM
  USE PHYSICAL_CONSTANTS
  DOUBLE PRECISION, PARAMETER :: MASS  = 123*UMA
  DOUBLE PRECISION, PARAMETER :: a_s   = 10*a_Bohr
END MODULE ATOM

MODULE TRAP
  USE PHYSICAL_CONSTANTS
  DOUBLE PRECISION, PARAMETER :: OMEGA_TRAP_x = 2*PI*10.0
  DOUBLE PRECISION, PARAMETER :: OMEGA_TRAP_y = 2*PI*100.0
  DOUBLE PRECISION, PARAMETER :: OMEGA_TRAP_z = 2*PI*100.0
END MODULE TRAP

MODULE OPTICAL_LATTICE
  USE PHYSICAL_CONSTANTS
  USE ATOM
  
  DOUBLE PRECISION, PARAMETER :: V_0       = 30        ! OPTICAL LATTICE DEPTH /E_R
  DOUBLE PRECISION, PARAMETER :: lambda    = 600.0E-9  ! optical lattice wavelength
  DOUBLE PRECISION, PARAMETER :: AMPLITUDE = 100.0E-9  ! OPTICAL LATTICE AMPLITUDE MODULATION
  DOUBLE PRECISION, PARAMETER :: OMEGA_MOD = 2*PI*1000.0 ! LATTICE FREQUENCY MODULATION
  
  DOUBLE PRECISION            :: E_R      = 0.5*(HBAR*2.0*PI/LAMBDA)**2/MASS
  DOUBLE PRECISION            :: J        = 4*((V_0)**0.75)*EXP(-2*SQRT(V_0))/SQRT(PI) ! Tight-binding tunneling rate /E_RICAL_LATTICE
  DOUBLE PRECISION            :: OMEGA_x  = (HBAR*2.0*PI/LAMBDA*SQRT(0.5/MASS))* &
       &                                    2*PI*SQRT(0.5*V_0/MASS)/(LAMBDA*0.5) ! Harmonic frequency at the bottom of the lattice
                                                                                 ! still it should be multiplied by sqrt(E_R)
END MODULE OPTICAL_LATTICE

SUBROUTINE TRAP_EFFECTS(SITE,EPSILON_J,DELTA_J,J_REN,K_J,INFO)
  USE PHYSICAL_CONSTANTS
  USE OPTICAL_LATTICE
  USE TRAP
  IMPLICIT NONE
  INTEGER,          INTENT(IN)    :: SITE
  DOUBLE PRECISION, INTENT(OUT)   :: DELTA_J,J_REN,K_J,EPSILON_J
  INTEGER,          INTENT(INOUT) :: INFO

  DOUBLE PRECISION :: ALPHA,BETA,GAMMA,DELTA,EPSILON
  DOUBLE PRECISION :: X
  ALPHA     = 0.0e-3
  BETA      = 0.0
  GAMMA     = 0.0
  DELTA     = 0.0
  EPSILON   = 0.0e-3

  EPSILON_J = EPSILON*SITE*SITE + DELTA

  DELTA_J   = ALPHA*SITE*SITE + BETA*SITE + GAMMA

  X     = 0.0!AMPLITUDE*MASS*OMEGA_MOD*(0.5*LAMBDA)*(1+(OMEGA_TRAP_X/OMEGA_X)**2)/HBAR
  J_REN = BESSEL_JN(0, X)

  K_J   = (J + DELTA_J)!*J_REN
  
END SUBROUTINE TRAP_EFFECTS

SUBROUTINE WRITE_MATRIX(A)
! it writes a matrix of doubles nxm on the screen
  DOUBLE PRECISION, DIMENSION(:,:) :: A
  CHARACTER(LEN=105) STRING
  CHARACTER(LEN=105) aux_char
  integer :: aux

  aux = int(UBOUND(A,2))
  !write(*,*) aux
  write(aux_char,"(I4)") aux
  aux_char = trim(aux_char)
  write(string,"(A1,I4,A6)") "(",aux,"E15.6)"

  DO I = LBOUND(A,1), UBOUND(A,1)
     WRITE(*,string) (A(I,J), J = LBOUND(A,2), UBOUND(A,2))
  END DO
  WRITE(*,*)
  WRITE(*,*)
END SUBROUTINE WRITE_MATRIX

SUBROUTINE WRITE_MATRIX_INT(A)
!it writes a matrix of integer nxm on the screen
  INTEGER, DIMENSION(:,:) :: A
  WRITE(*,*)
  DO I = LBOUND(A,1), UBOUND(A,1)
     WRITE(*,*) (A(I,J), J = LBOUND(A,2), UBOUND(A,2))
  END DO
END SUBROUTINE WRITE_MATRIX_INT

